name: 🚀 Production Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '18'

jobs:
  # Pre-deployment quality gates
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.quality-check.outputs.should-deploy }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔨 Build application
        run: npm run build

      - name: 🧹 Lint check
        run: npm run lint

      - name: 🔍 Type check
        run: npm run type-check

      - name: 🧪 Run unit tests
        run: npm run test

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🧪 Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/

      - name: ✅ Quality check decision
        id: quality-check
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🚨 Force deployment enabled - bypassing quality gates"
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ All quality gates passed"
          fi

  # Production deployment
  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    environment:
      name: production
      url: https://faevision.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📥 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Link Vercel project
        run: vercel link --yes --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🔨 Build application
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to production
        id: deploy
        run: |
          deployment_url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$deployment_url" >> $GITHUB_OUTPUT
          echo "🚀 Deployed to: $deployment_url"

      - name: 🏥 Health check
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          
          # Check main site
          status=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.deployment-url }}")
          if [ "$status" != "200" ]; then
            echo "❌ Health check failed: HTTP $status"
            exit 1
          fi
          
          # Check API health
          api_status=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.deployment-url }}/api/health")
          if [ "$api_status" != "200" ]; then
            echo "❌ API health check failed: HTTP $api_status"
            exit 1
          fi
          
          echo "✅ All health checks passed"

      - name: 🔗 Update Linear issue
        if: success()
        run: |
          # Update Linear issue with deployment success
          curl -X POST "https://api.linear.app/graphql" \
            -H "Authorization: Bearer ${{ secrets.LINEAR_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "mutation { issueUpdate(id: \"9f1c891c-b7b0-4408-97c7-a3b2bccb0e83\", input: { stateId: \"completed\" }) { success } }"
            }' || echo "Linear update failed (non-blocking)"

      - name: 📊 Performance audit
        run: |
          echo "🔍 Running production performance audit..."
          npx lighthouse "${{ steps.deploy.outputs.deployment-url }}" \
            --chrome-flags="--headless --no-sandbox" \
            --output=json \
            --output-path=./lighthouse-report.json \
            --only-categories=performance,accessibility,best-practices || echo "Lighthouse audit failed (non-blocking)"

      - name: 📈 Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-report.json

  # Post-deployment monitoring
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Monitor deployment
        run: |
          echo "📊 Starting post-deployment monitoring..."
          
          # Monitor for 5 minutes
          for i in {1..10}; do
            echo "📈 Health check $i/10..."
            
            status=$(curl -s -o /dev/null -w "%{http_code}" "https://faevision.com")
            api_status=$(curl -s -o /dev/null -w "%{http_code}" "https://faevision.com/api/health")
            
            echo "Main site: HTTP $status, API: HTTP $api_status"
            
            if [ "$status" != "200" ] || [ "$api_status" != "200" ]; then
              echo "⚠️  Deployment monitoring detected issues"
            fi
            
            sleep 30
          done
          
          echo "✅ Deployment monitoring completed"

      - name: 📱 Notification
        if: always()
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "🎉 FAEVision MVP successfully deployed to production!"
            echo "🌐 Production URL: https://faevision.com"
            echo "📊 Monitor: https://vercel.com/faevision/faevision-mvp"
          else
            echo "❌ Production deployment failed"
          fi

  # Rollback capability
  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [quality-gates, deploy-production]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔄 Rollback deployment
        run: |
          echo "🚨 Initiating emergency rollback..."
          
          # Get previous deployment
          previous_deployment=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "READY" | head -2 | tail -1 | awk '{print $1}')
          
          if [ -n "$previous_deployment" ]; then
            vercel promote "$previous_deployment" --token=${{ secrets.VERCEL_TOKEN }}
            echo "✅ Rollback completed to: $previous_deployment"
          else
            echo "❌ No previous deployment found for rollback"
            exit 1
          fi

      - name: 📱 Rollback notification
        run: |
          echo "🔄 Emergency rollback completed"
          echo "📊 Check status: https://vercel.com/faevision/faevision-mvp"
