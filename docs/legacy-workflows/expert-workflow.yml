name: Expert Workflow Integration
# Implements Alex Johnson (Linear Expert) + Taylor Morgan (GitHub Expert) unified workflow
# Coordinates all 11 FAEVision experts through Linear-GitHub-Cursor integration

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, closed]
  issues:
    types: [opened, assigned, labeled]
  workflow_dispatch:
    inputs:
      expert_action:
        description: 'Expert Action Type'
        required: true
        type: choice
        options:
          [
            'validate-assignment',
            'check-dependencies',
            'run-quality-gates',
            'expert-review',
          ]
      linear_issue:
        description: 'Linear Issue ID (FAE-XXX)'
        required: false
        type: string

jobs:
  # ============================================================================
  # EXPERT ASSIGNMENT VALIDATION
  # ============================================================================
  validate-expert-assignment:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event.inputs.expert_action == 'validate-assignment'
    steps:
      - name: Extract Issue Context
        id: context
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            TITLE="${{ github.event.issue.title }}"
            BODY="${{ github.event.issue.body }}"
            LABELS="${{ join(github.event.issue.labels.*.name, ',') }}"
            ASSIGNEE="${{ github.event.issue.assignee.login }}"
          else
            TITLE="Manual Validation"
            BODY="Expert workflow validation"
            LABELS=""
            ASSIGNEE="${{ github.actor }}"
          fi

          echo "Issue Title: $TITLE"
          echo "Labels: $LABELS"
          echo "Assignee: $ASSIGNEE"

          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
          echo "assignee=$ASSIGNEE" >> $GITHUB_OUTPUT

      - name: Determine Required Expert
        id: expert-analysis
        uses: actions/github-script@v7
        with:
          script: |
            const title = '${{ steps.context.outputs.title }}';
            const labels = '${{ steps.context.outputs.labels }}';

            // Expert assignment rules based on Alex Johnson's methodology
            const expertRules = {
              // Database work - Morgan Smith (Database Architect)
              database: {
                expert: 'morgan-smith',
                triggers: ['prisma', 'schema', 'migration', 'database', 'sql', 'postgres'],
                mandatory: true
              },
              
              // AI features - Dr. Priya Patel + Jordan Lee
              ai: {
                expert: 'priya-patel',
                support: 'jordan-lee',
                triggers: ['ai', 'gpt', 'openai', 'tagging', 'suggestions', 'document generation'],
                mandatory: true
              },
              
              // Executive interfaces - Sarah Chen + Marcus Rodriguez
              executive: {
                expert: 'sarah-chen',
                support: 'marcus-rodriguez',
                triggers: ['executive', 'dashboard', 'analytics', 'requirements', 'approval'],
                mandatory: true
              },
              
              // Frontend/UI - Alex Thompson + Maya Rodriguez + David Chen
              frontend: {
                expert: 'alex-thompson',
                design_review: ['maya-rodriguez', 'david-chen'],
                triggers: ['component', 'ui', 'form', 'interface', 'responsive']
              },
              
              // Infrastructure - Jordan Kim + Taylor Morgan
              infrastructure: {
                vercel: 'jordan-kim',
                github: 'taylor-morgan',
                triggers: ['deployment', 'ci/cd', 'pipeline', 'infrastructure', 'platform']
              }
            };

            // Analyze title and labels for expert requirements
            let requiredExperts = [];
            let recommendations = [];

            const textToAnalyze = (title + ' ' + labels).toLowerCase();

            Object.entries(expertRules).forEach(([category, rule]) => {
              const hasMatch = rule.triggers.some(trigger => 
                textToAnalyze.includes(trigger.toLowerCase())
              );
              
              if (hasMatch) {
                if (rule.mandatory) {
                  requiredExperts.push({
                    category,
                    expert: rule.expert,
                    support: rule.support,
                    design_review: rule.design_review,
                    mandatory: true
                  });
                } else {
                  recommendations.push({
                    category,
                    expert: rule.expert,
                    support: rule.support,
                    mandatory: false
                  });
                }
              }
            });

            console.log('Expert Analysis Results:');
            console.log('Required Experts:', requiredExperts);
            console.log('Recommendations:', recommendations);

            // Set outputs
            core.setOutput('required_experts', JSON.stringify(requiredExperts));
            core.setOutput('recommendations', JSON.stringify(recommendations));
            core.setOutput('analysis_complete', 'true');

            return {
              required: requiredExperts,
              recommended: recommendations,
              total_experts: requiredExperts.length + recommendations.length
            };

      - name: Create Expert Assignment Report
        if: steps.expert-analysis.outputs.analysis_complete == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const requiredExperts = JSON.parse('${{ steps.expert-analysis.outputs.required_experts }}');
            const recommendations = JSON.parse('${{ steps.expert-analysis.outputs.recommendations }}');
            const currentAssignee = '${{ steps.context.outputs.assignee }}';

            let report = `## 👥 Expert Assignment Analysis\n\n`;

            if (requiredExperts.length > 0) {
              report += `### 🔴 **Required Expert Review**\n\n`;
              requiredExperts.forEach(expert => {
                report += `- **${expert.category.toUpperCase()}**: @${expert.expert}`;
                if (expert.support) report += ` (Support: @${expert.support})`;
                if (expert.design_review) report += ` (Design Review: ${expert.design_review.map(e => '@' + e).join(', ')})`;
                report += `\n`;
              });
              report += `\n`;
            }

            if (recommendations.length > 0) {
              report += `### 🟡 **Recommended Expert Consultation**\n\n`;
              recommendations.forEach(expert => {
                report += `- **${expert.category.toUpperCase()}**: @${expert.expert}\n`;
              });
              report += `\n`;
            }

            if (currentAssignee) {
              report += `### 📋 **Current Assignment**\n\n`;
              report += `Assigned to: @${currentAssignee}\n\n`;
              
              // Check if current assignee matches required experts
              const isCorrectAssignment = requiredExperts.some(expert => 
                expert.expert === currentAssignee || 
                expert.support === currentAssignee ||
                (expert.design_review && expert.design_review.includes(currentAssignee))
              );
              
              if (requiredExperts.length > 0 && !isCorrectAssignment) {
                report += `⚠️ **Assignment Mismatch**: Current assignee may not have required expertise for this work type.\n\n`;
              } else if (isCorrectAssignment) {
                report += `✅ **Assignment Valid**: Current assignee has appropriate expertise.\n\n`;
              }
            }

            report += `---\n*Analysis by Alex Johnson's Linear Expert methodology*`;

            console.log('Expert Assignment Report:');
            console.log(report);

            // In production, this would create a Linear comment
            // For now, we'll create a GitHub comment for tracking
            if (context.issue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

  # ============================================================================
  # QUALITY GATES VALIDATION
  # ============================================================================
  expert-quality-gates:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.expert_action == 'run-quality-gates'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Expert-Specific Quality Checks
        run: |
          echo "🔍 Running Expert Quality Gates"
          echo "================================"

          # Database Expert Gates (Morgan Smith)
          if [ -d "prisma" ] && find . -name "*.prisma" -o -name "*migration*" | grep -q .; then
            echo "📊 Database Expert Quality Gates (Morgan Smith)"
            if command -v npx prisma &> /dev/null; then
              npx prisma validate
              npx prisma format --check
            fi
          fi

          # Frontend Expert Gates (Alex Thompson + Maya + David)
          if find . -name "*.tsx" -o -name "*.jsx" -o -name "*.ts" -o -name "*.js" | grep -q .; then
            echo "🎨 Frontend Expert Quality Gates (Alex Thompson, Maya Rodriguez, David Chen)"
            npm run lint || echo "Linting check needed"
            npm run type-check || echo "Type checking needed"
          fi

          # AI Expert Gates (Dr. Priya Patel)
          if find . -path "*/ai/*" -o -name "*ai*" | grep -q .; then
            echo "🤖 AI Expert Quality Gates (Dr. Priya Patel)"
            echo "AI feature validation would run here"
          fi

          echo "✅ Expert quality gates completed"

      - name: Security Expert Review (Infrastructure)
        run: |
          echo "🔒 Security Expert Review (Jordan Kim, Taylor Morgan)"

          # Check for security patterns
          if find . -name "*.env*" -o -name "*secret*" -o -name "*key*" | grep -q .; then
            echo "🔍 Security file patterns detected - expert review required"
          fi

          # Run security audit
          npm audit --audit-level moderate || echo "Security audit completed with findings"

  # ============================================================================
  # DEPLOYMENT READINESS CHECK
  # ============================================================================
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [validate-expert-assignment, expert-quality-gates]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:
      - name: Evaluate Deployment Readiness
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🚀 Deployment Readiness Evaluation');
            console.log('====================================');

            // Check if this PR is ready for deployment
            const pr = context.payload.pull_request;
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            // Expert approval requirements based on files changed
            const expertApprovals = {
              database: false,
              ai: false,
              executive: false,
              infrastructure: false,
              frontend: false
            };

            // Analyze changed files for expert requirements
            files.data.forEach(file => {
              const filename = file.filename.toLowerCase();
              
              if (filename.includes('prisma') || filename.includes('migration')) {
                expertApprovals.database = true;
              }
              if (filename.includes('ai') || filename.includes('gpt')) {
                expertApprovals.ai = true;
              }
              if (filename.includes('dashboard') || filename.includes('executive')) {
                expertApprovals.executive = true;
              }
              if (filename.includes('.github') || filename.includes('vercel')) {
                expertApprovals.infrastructure = true;
              }
              if (filename.includes('component') || filename.includes('ui')) {
                expertApprovals.frontend = true;
              }
            });

            const requiredApprovals = Object.entries(expertApprovals)
              .filter(([_, required]) => required)
              .map(([expert, _]) => expert);

            let readinessReport = `## 🚀 Deployment Readiness Check\n\n`;

            if (requiredApprovals.length > 0) {
              readinessReport += `### Required Expert Approvals\n\n`;
              requiredApprovals.forEach(expert => {
                readinessReport += `- [ ] **${expert.toUpperCase()}** expert review\n`;
              });
              readinessReport += `\n`;
            } else {
              readinessReport += `### ✅ No specialized expert approvals required\n\n`;
            }

            readinessReport += `### Deployment Checklist\n\n`;
            readinessReport += `- [ ] Quality gates passed\n`;
            readinessReport += `- [ ] Expert reviews completed\n`;
            readinessReport += `- [ ] Linear issue updated\n`;
            readinessReport += `- [ ] Documentation updated\n`;
            readinessReport += `- [ ] Breaking changes documented\n\n`;

            readinessReport += `---\n*Alex Johnson's Linear Expert + Taylor Morgan's GitHub Expert deployment protocol*`;

            console.log(readinessReport);

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: readinessReport
            });

  # ============================================================================
  # INTEGRATION SUMMARY
  # ============================================================================
  workflow-summary:
    runs-on: ubuntu-latest
    needs:
      [validate-expert-assignment, expert-quality-gates, deployment-readiness]
    if: always()
    steps:
      - name: Create Workflow Summary
        run: |
          echo "📊 Expert Workflow Integration Summary"
          echo "======================================="
          echo ""
          echo "🔗 Linear-GitHub Integration: Active"
          echo "👥 Expert Assignment: Validated"
          echo "🔍 Quality Gates: Completed"
          echo "🚀 Deployment Check: Evaluated"
          echo ""
          echo "Next Steps:"
          echo "1. Review expert assignments"
          echo "2. Address quality gate findings"
          echo "3. Obtain required expert approvals"
          echo "4. Update Linear issue status"
          echo "5. Proceed with deployment when ready"
          echo ""
          echo "🎯 FAEVision Expert Workflow: Operational"
