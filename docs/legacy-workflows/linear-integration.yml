name: Linear Integration
# Implements Alex Johnson (Linear Expert) and Taylor Morgan (GitHub Expert) integration strategy
# Provides bidirectional Linear-GitHub synchronization for FAEVision MVP

on:
  issues:
    types: [opened, edited, closed, reopened]
  pull_request:
    types: [opened, closed, merged, reopened, synchronize]
  push:
    branches: [main, develop]

jobs:
  # ============================================================================
  # LINEAR ISSUE SYNCHRONIZATION
  # ============================================================================
  sync-linear-issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: Extract Linear Issue ID
        id: linear-id
        run: |
          title="${{ github.event.issue.title }}"
          echo "Processing issue: $title"

          # Extract FAE-XXX pattern from title or body
          issue_id=$(echo "$title" | grep -o 'FAE-[0-9]*' | head -1)
          if [ -z "$issue_id" ]; then
            issue_id=$(echo "${{ github.event.issue.body }}" | grep -o 'FAE-[0-9]*' | head -1)
          fi

          echo "Linear issue ID: $issue_id"
          echo "issue_id=$issue_id" >> $GITHUB_OUTPUT

          # Determine Linear status based on GitHub issue state
          case "${{ github.event.action }}" in
            "opened"|"reopened")
              linear_status="In Progress"
              ;;
            "closed")
              linear_status="Done"
              ;;
            *)
              linear_status="In Progress"
              ;;
          esac

          echo "linear_status=$linear_status" >> $GITHUB_OUTPUT

      - name: Update Linear Issue Status
        if: steps.linear-id.outputs.issue_id != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issueId = '${{ steps.linear-id.outputs.issue_id }}';
            const status = '${{ steps.linear-id.outputs.linear_status }}';
            const githubUrl = '${{ github.event.issue.html_url }}';

            console.log(`Updating Linear issue ${issueId} to status: ${status}`);
            console.log(`Adding GitHub link: ${githubUrl}`);

            // This would integrate with Linear API in production
            // For now, we'll create a comment documenting the sync
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üîó **Linear Integration**\n\n` +
                    `Linear Issue: ${issueId}\n` +
                    `Status: ${status}\n` +
                    `Sync Time: ${new Date().toISOString()}\n\n` +
                    `*Automated sync with Linear workspace*`
            });

  # ============================================================================
  # PULL REQUEST TO LINEAR SYNC
  # ============================================================================
  sync-linear-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Extract Linear Issue from PR
        id: pr-linear
        run: |
          # Extract from PR title, branch name, or body
          title="${{ github.event.pull_request.title }}"
          branch="${{ github.event.pull_request.head.ref }}"
          body="${{ github.event.pull_request.body }}"

          echo "PR Title: $title"
          echo "Branch: $branch" 
          echo "Processing PR for Linear sync..."

          # Try multiple extraction methods
          issue_id=$(echo "$title" | grep -o 'FAE-[0-9]*' | head -1)
          if [ -z "$issue_id" ]; then
            issue_id=$(echo "$branch" | grep -o 'FAE-[0-9]*' | head -1)
          fi
          if [ -z "$issue_id" ]; then
            issue_id=$(echo "$body" | grep -o 'FAE-[0-9]*' | head -1)
          fi

          echo "Linear issue ID: $issue_id"
          echo "issue_id=$issue_id" >> $GITHUB_OUTPUT

          # Determine Linear status based on PR state
          case "${{ github.event.action }}" in
            "opened")
              linear_status="In Review"
              ;;
            "closed")
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                linear_status="Done"
              else
                linear_status="In Progress"
              fi
              ;;
            "reopened")
              linear_status="In Review"
              ;;
            *)
              linear_status="In Review"
              ;;
          esac

          echo "linear_status=$linear_status" >> $GITHUB_OUTPUT

      - name: Update Linear Issue with PR Info
        if: steps.pr-linear.outputs.issue_id != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issueId = '${{ steps.pr-linear.outputs.issue_id }}';
            const status = '${{ steps.pr-linear.outputs.linear_status }}';
            const prUrl = '${{ github.event.pull_request.html_url }}';
            const action = '${{ github.event.action }}';
            const merged = '${{ github.event.pull_request.merged }}';

            let statusEmoji = 'üîÑ';
            let actionText = 'updated';

            switch(action) {
              case 'opened':
                statusEmoji = 'üéØ';
                actionText = 'opened';
                break;
              case 'closed':
                statusEmoji = merged === 'true' ? '‚úÖ' : '‚ùå';
                actionText = merged === 'true' ? 'merged' : 'closed';
                break;
              case 'reopened':
                statusEmoji = 'üîÑ';
                actionText = 'reopened';
                break;
            }

            console.log(`Updating Linear issue ${issueId} - PR ${actionText}`);

            // In production, this would call Linear API
            // For now, create GitHub comment to document the sync
            const comment = `${statusEmoji} **Linear Integration Update**\n\n` +
                          `Linear Issue: **${issueId}**\n` +
                          `Status: **${status}**\n` +
                          `PR Action: **${actionText}**\n` +
                          `PR Link: ${prUrl}\n` +
                          `Sync Time: ${new Date().toISOString()}\n\n` +
                          `*Automated Linear-GitHub synchronization*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # ============================================================================
  # BRANCH CREATION FROM LINEAR
  # ============================================================================
  validate-branch-naming:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Validate Branch Naming Convention
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ github.event.pull_request.head.ref }}';
            const validPattern = /^(feature|fix|hotfix|chore|docs)\/FAE-\d+-.+$/;

            console.log(`Validating branch name: ${branch}`);

            if (!validPattern.test(branch)) {
              const comment = `‚ö†Ô∏è **Branch Naming Convention**\n\n` +
                            `Branch name \`${branch}\` does not follow our Linear integration convention.\n\n` +
                            `**Expected format:** \`type/FAE-XXX-description\`\n` +
                            `**Examples:**\n` +
                            `- \`feature/FAE-123-user-authentication\`\n` +
                            `- \`fix/FAE-456-api-performance-bug\`\n` +
                            `- \`hotfix/FAE-789-critical-security-fix\`\n\n` +
                            `Please rename your branch for proper Linear tracking.`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              
              // Create a check that fails for invalid branch names
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Linear Branch Naming',
                head_sha: '${{ github.event.pull_request.head.sha }}',
                status: 'completed',
                conclusion: 'failure',
                output: {
                  title: 'Invalid branch naming convention',
                  summary: `Branch "${branch}" does not follow Linear integration pattern: type/FAE-XXX-description`
                }
              });
            } else {
              console.log('‚úÖ Branch naming convention valid');
              
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Linear Branch Naming',
                head_sha: '${{ github.event.pull_request.head.sha }}',
                status: 'completed',
                conclusion: 'success',
                output: {
                  title: 'Branch naming convention valid',
                  summary: `Branch "${branch}" follows Linear integration pattern correctly`
                }
              });
            }

  # ============================================================================
  # COMMIT MESSAGE VALIDATION
  # ============================================================================
  validate-commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Commit Messages
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Get commits in this PR
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const conventionalPattern = /^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .{1,50}/;
            const linearPattern = /FAE-\d+/;

            let validCommits = 0;
            let invalidCommits = [];

            for (const commit of commits.data) {
              const message = commit.commit.message.split('\n')[0]; // First line only
              console.log(`Checking commit: ${message}`);
              
              const isConventional = conventionalPattern.test(message);
              const hasLinearRef = linearPattern.test(message) || linearPattern.test(commit.commit.message);
              
              if (isConventional && hasLinearRef) {
                validCommits++;
                console.log(`‚úÖ Valid commit: ${message}`);
              } else {
                invalidCommits.push({
                  sha: commit.sha,
                  message: message,
                  issues: [
                    !isConventional ? 'Missing conventional commit format' : null,
                    !hasLinearRef ? 'Missing Linear issue reference (FAE-XXX)' : null
                  ].filter(Boolean)
                });
                console.log(`‚ùå Invalid commit: ${message}`);
              }
            }

            if (invalidCommits.length > 0) {
              const comment = `‚ö†Ô∏è **Commit Message Validation**\n\n` +
                            `Found ${invalidCommits.length} commit(s) that don't follow our Linear integration standards:\n\n` +
                            invalidCommits.map(c => 
                              `**${c.sha.substring(0, 8)}**: \`${c.message}\`\n` +
                              c.issues.map(issue => `- ‚ùå ${issue}`).join('\n')
                            ).join('\n\n') +
                            `\n\n**Required format:** \`type(scope): description\` with FAE-XXX reference\n` +
                            `**Example:** \`feat(auth): implement OAuth2 login for FAE-123\`\n\n` +
                            `Please update commit messages for proper Linear tracking.`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } else {
              console.log(`‚úÖ All ${validCommits} commits follow Linear integration standards`);
            }

  # ============================================================================
  # LINEAR INTEGRATION SUMMARY
  # ============================================================================
  integration-summary:
    runs-on: ubuntu-latest
    needs:
      [
        sync-linear-issue,
        sync-linear-pr,
        validate-branch-naming,
        validate-commits,
      ]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Create Integration Summary
        uses: actions/github-script@v7
        with:
          script: |
            const prUrl = '${{ github.event.pull_request.html_url }}';
            const branch = '${{ github.event.pull_request.head.ref }}';
            const author = '${{ github.event.pull_request.user.login }}';

            // Extract Linear issue for summary
            const title = '${{ github.event.pull_request.title }}';
            const issueId = title.match(/FAE-\d+/)?.[0] || 'Not found';

            const summary = `üîó **Linear-GitHub Integration Summary**\n\n` +
                          `**Author:** @${author}\n` +
                          `**Branch:** \`${branch}\`\n` +
                          `**Linear Issue:** ${issueId}\n` +
                          `**PR:** ${prUrl}\n\n` +
                          `**Integration Status:**\n` +
                          `- Branch naming validation completed\n` +
                          `- Commit message validation completed\n` +
                          `- Linear synchronization initiated\n\n` +
                          `*This PR follows Alex Johnson's Linear Expert methodology and Taylor Morgan's GitHub Expert integration patterns.*`;

            console.log('Creating Linear-GitHub integration summary...');
            console.log(summary);
