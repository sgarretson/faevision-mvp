
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.InputToInputGroupScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.Ai_analysis_auditScalarFieldEnum = {
  id: 'id',
  hotspotId: 'hotspotId',
  analysisType: 'analysisType',
  userId: 'userId',
  requestData: 'requestData',
  responseData: 'responseData',
  processingTime: 'processingTime',
  confidence: 'confidence',
  status: 'status',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.Ai_insight_overridesScalarFieldEnum = {
  id: 'id',
  signalId: 'signalId',
  insightId: 'insightId',
  insightType: 'insightType',
  originalRecommendation: 'originalRecommendation',
  overrideReason: 'overrideReason',
  executiveJustification: 'executiveJustification',
  newValue: 'newValue',
  executiveId: 'executiveId',
  executiveName: 'executiveName',
  executiveEmail: 'executiveEmail',
  overriddenAt: 'overriddenAt',
  createdAt: 'createdAt'
};

exports.Prisma.Audit_logsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  changes: 'changes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  sessionId: 'sessionId'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  icon: 'icon',
  parentId: 'parentId',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  usageCount: 'usageCount',
  isSystem: 'isSystem',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentId: 'parentId',
  createdBy: 'createdBy',
  edited: 'edited',
  editedAt: 'editedAt',
  entityId: 'entityId',
  entityType: 'entityType',
  mentions: 'mentions'
};

exports.Prisma.DepartmentsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  headCount: 'headCount',
  budgetAllocation: 'budgetAllocation',
  managerId: 'managerId',
  costCenter: 'costCenter',
  location: 'location',
  isActive: 'isActive',
  utilizationTarget: 'utilizationTarget',
  actualUtilization: 'actualUtilization',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Frd_documentsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  origin: 'origin',
  aiConfidence: 'aiConfidence',
  aiMetadata: 'aiMetadata',
  qualityScore: 'qualityScore',
  aiPromptUsed: 'aiPromptUsed',
  version: 'version',
  status: 'status',
  executiveApproved: 'executiveApproved',
  exportFormats: 'exportFormats',
  templateUsed: 'templateUsed',
  generationTime: 'generationTime',
  wordCount: 'wordCount',
  lastExportedAt: 'lastExportedAt',
  solutionId: 'solutionId',
  createdBy: 'createdBy',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Hotspot_signalsScalarFieldEnum = {
  hotspotId: 'hotspotId',
  signalId: 'signalId',
  membershipStrength: 'membershipStrength',
  isOutlier: 'isOutlier',
  addedAt: 'addedAt'
};

exports.Prisma.HotspotsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  summary: 'summary',
  status: 'status',
  rankScore: 'rankScore',
  confidence: 'confidence',
  primaryCategoryId: 'primaryCategoryId',
  linkedEntitiesJson: 'linkedEntitiesJson',
  clusteringMethod: 'clusteringMethod',
  similarityThreshold: 'similarityThreshold',
  rcaBreakdownJson: 'rcaBreakdownJson',
  solutionSuggestionsJson: 'solutionSuggestionsJson',
  decisionMatrixJson: 'decisionMatrixJson',
  crossFunctionalImpactJson: 'crossFunctionalImpactJson',
  lastAnalysisAt: 'lastAnalysisAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clusteringQualityScore: 'clusteringQualityScore',
  clusteringResults: 'clusteringResults',
  clusteringVersion: 'clusteringVersion',
  lastClusteredAt: 'lastClusteredAt'
};

exports.Prisma.IdeasScalarFieldEnum = {
  id: 'id',
  hotspotId: 'hotspotId',
  title: 'title',
  description: 'description',
  origin: 'origin',
  votes: 'votes',
  status: 'status',
  evidenceJson: 'evidenceJson',
  tagsJson: 'tagsJson',
  aiConfidence: 'aiConfidence',
  aiMetadata: 'aiMetadata',
  qualityScore: 'qualityScore',
  createdById: 'createdById',
  initiativeId: 'initiativeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InitiativesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  priority: 'priority',
  ownerId: 'ownerId',
  budget: 'budget',
  actualSpend: 'actualSpend',
  startDate: 'startDate',
  targetDate: 'targetDate',
  completionDate: 'completionDate',
  expectedROI: 'expectedROI',
  actualROI: 'actualROI',
  riskLevel: 'riskLevel',
  goalJson: 'goalJson',
  roiJson: 'roiJson',
  milestonesJson: 'milestonesJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Input_groupsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  aiSuggested: 'aiSuggested',
  aiConfidence: 'aiConfidence',
  aiReasoning: 'aiReasoning',
  avgPriority: 'avgPriority',
  color: 'color',
  createdBy: 'createdBy',
  inputCount: 'inputCount',
  lastActivity: 'lastActivity'
};

exports.Prisma.InputsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  department: 'department',
  rootCause: 'rootCause',
  aiTags: 'aiTags',
  aiSuggestions: 'aiSuggestions',
  aiConfidence: 'aiConfidence',
  issueType: 'issueType',
  priority: 'priority'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  readAt: 'readAt',
  createdAt: 'createdAt',
  delivered: 'delivered',
  entityId: 'entityId',
  entityType: 'entityType',
  read: 'read'
};

exports.Prisma.RequirementsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  acceptanceCriteria: 'acceptanceCriteria',
  status: 'status',
  origin: 'origin',
  aiConfidence: 'aiConfidence',
  aiMetadata: 'aiMetadata',
  qualityScore: 'qualityScore',
  estimatedEffort: 'estimatedEffort',
  dependencies: 'dependencies',
  businessValue: 'businessValue',
  riskAssessment: 'riskAssessment',
  stakeholders: 'stakeholders',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectionReason: 'rejectionReason',
  solutionId: 'solutionId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  priority: 'priority'
};

exports.Prisma.SignalsScalarFieldEnum = {
  id: 'id',
  inputId: 'inputId',
  timestamp: 'timestamp',
  receivedAt: 'receivedAt',
  schemaVersion: 'schemaVersion',
  sourceJson: 'sourceJson',
  confidence: 'confidence',
  attachmentsJson: 'attachmentsJson',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  systemName: 'systemName',
  title: 'title',
  description: 'description',
  severity: 'severity',
  severityScore: 'severityScore',
  departmentId: 'departmentId',
  teamId: 'teamId',
  categoryId: 'categoryId',
  metricsJson: 'metricsJson',
  baselineJson: 'baselineJson',
  impactJson: 'impactJson',
  tagsJson: 'tagsJson',
  entitiesJson: 'entitiesJson',
  privacyLevel: 'privacyLevel',
  dedupeKey: 'dedupeKey',
  embedding: 'embedding',
  aiProcessed: 'aiProcessed',
  aiTagsJson: 'aiTagsJson',
  lineageJson: 'lineageJson',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  domainClassification: 'domainClassification',
  enhancedTagsJson: 'enhancedTagsJson',
  lastTaggedAt: 'lastTaggedAt',
  tagGenerationMeta: 'tagGenerationMeta',
  tagModelVersion: 'tagModelVersion',
  clusteringFeaturesJson: 'clusteringFeaturesJson',
  featuresQualityScore: 'featuresQualityScore',
  featuresVersion: 'featuresVersion',
  lastFeaturesGeneratedAt: 'lastFeaturesGeneratedAt'
};

exports.Prisma.SolutionsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  origin: 'origin',
  aiConfidence: 'aiConfidence',
  aiMetadata: 'aiMetadata',
  qualityScore: 'qualityScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  estimatedEffort: 'estimatedEffort',
  actualCompletionDate: 'actualCompletionDate',
  actualImpactJson: 'actualImpactJson',
  businessValue: 'businessValue',
  createdBy: 'createdBy',
  expectedImpactJson: 'expectedImpactJson',
  hotspotId: 'hotspotId',
  ideaId: 'ideaId',
  initiativeId: 'initiativeId',
  inputId: 'inputId',
  progress: 'progress',
  successMetrics: 'successMetrics',
  targetDate: 'targetDate',
  tasks: 'tasks'
};

exports.Prisma.TeamsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  departmentId: 'departmentId',
  leaderId: 'leaderId',
  memberCount: 'memberCount',
  maxCapacity: 'maxCapacity',
  isActive: 'isActive',
  teamType: 'teamType',
  currentProjects: 'currentProjects',
  budgetAllocation: 'budgetAllocation',
  utilizationRate: 'utilizationRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  department: 'department',
  avatar: 'avatar',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  managerId: 'managerId',
  billableRate: 'billableRate',
  costCenter: 'costCenter',
  location: 'location',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  profileJson: 'profileJson',
  targetUtilization: 'targetUtilization',
  utilizationRate: 'utilizationRate',
  departmentObjId: 'departmentObjId'
};

exports.Prisma.VotesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  entityId: 'entityId',
  entityType: 'entityType',
  value: 'value'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.EntityType = exports.$Enums.EntityType = {
  INPUT: 'INPUT',
  SIGNAL: 'SIGNAL',
  HOTSPOT: 'HOTSPOT',
  IDEA: 'IDEA',
  SOLUTION: 'SOLUTION',
  REQUIREMENT: 'REQUIREMENT',
  FRD_DOCUMENT: 'FRD_DOCUMENT'
};

exports.CreationOrigin = exports.$Enums.CreationOrigin = {
  AI: 'AI',
  HUMAN: 'HUMAN',
  HYBRID: 'HYBRID'
};

exports.FRDStatus = exports.$Enums.FRDStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  DELIVERED: 'DELIVERED',
  ARCHIVED: 'ARCHIVED'
};

exports.HotspotStatus = exports.$Enums.HotspotStatus = {
  OPEN: 'OPEN',
  APPROVED: 'APPROVED',
  HANDED_OFF: 'HANDED_OFF',
  MONITORING: 'MONITORING',
  RESOLVED: 'RESOLVED',
  CLOSED_NO_ACTION: 'CLOSED_NO_ACTION'
};

exports.initiative_status = exports.$Enums.initiative_status = {
  PLANNING: 'PLANNING',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.priority = exports.$Enums.priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT',
  CRITICAL: 'CRITICAL'
};

exports.risk_level = exports.$Enums.risk_level = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.InputType = exports.$Enums.InputType = {
  PROBLEM: 'PROBLEM',
  OPPORTUNITY: 'OPPORTUNITY',
  GENERAL: 'GENERAL'
};

exports.InputStatus = exports.$Enums.InputStatus = {
  ACTIVE: 'ACTIVE',
  RESOLVED: 'RESOLVED',
  ARCHIVED: 'ARCHIVED',
  DUPLICATE: 'DUPLICATE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MENTION: 'MENTION',
  VOTE: 'VOTE',
  COMMENT: 'COMMENT',
  STATUS_CHANGE: 'STATUS_CHANGE',
  APPROVAL_REQUEST: 'APPROVAL_REQUEST',
  ASSIGNMENT: 'ASSIGNMENT',
  DEADLINE_REMINDER: 'DEADLINE_REMINDER'
};

exports.RequirementStatus = exports.$Enums.RequirementStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  IMPLEMENTED: 'IMPLEMENTED',
  OBSOLETE: 'OBSOLETE'
};

exports.Severity = exports.$Enums.Severity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.SolutionStatus = exports.$Enums.SolutionStatus = {
  DRAFT: 'DRAFT',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  IMPLEMENTED: 'IMPLEMENTED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  EXECUTIVE: 'EXECUTIVE',
  CONTRIBUTOR: 'CONTRIBUTOR'
};

exports.VoteValue = exports.$Enums.VoteValue = {
  UP: 'UP',
  DOWN: 'DOWN'
};

exports.Prisma.ModelName = {
  InputToInputGroup: 'InputToInputGroup',
  ai_analysis_audit: 'ai_analysis_audit',
  ai_insight_overrides: 'ai_insight_overrides',
  audit_logs: 'audit_logs',
  categories: 'categories',
  comments: 'comments',
  departments: 'departments',
  frd_documents: 'frd_documents',
  hotspot_signals: 'hotspot_signals',
  hotspots: 'hotspots',
  ideas: 'ideas',
  initiatives: 'initiatives',
  input_groups: 'input_groups',
  inputs: 'inputs',
  notifications: 'notifications',
  requirements: 'requirements',
  signals: 'signals',
  solutions: 'solutions',
  teams: 'teams',
  users: 'users',
  votes: 'votes'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
