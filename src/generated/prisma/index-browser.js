/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, '__esModule', { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require('./runtime/index-browser.js');

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: '6.16.1',
  engine: '1c57fdcd7e44b29b9313256c76699e91c3ac3c43',
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  department: 'department',
  avatar: 'avatar',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  departmentId: 'departmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.InitiativeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ownerId: 'ownerId',
  goalJson: 'goalJson',
  roiJson: 'roiJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
};

exports.Prisma.SignalScalarFieldEnum = {
  id: 'id',
  inputId: 'inputId',
  timestamp: 'timestamp',
  receivedAt: 'receivedAt',
  schemaVersion: 'schemaVersion',
  sourceJson: 'sourceJson',
  confidence: 'confidence',
  attachmentsJson: 'attachmentsJson',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  systemName: 'systemName',
  title: 'title',
  description: 'description',
  severity: 'severity',
  severityScore: 'severityScore',
  departmentId: 'departmentId',
  teamId: 'teamId',
  metricsJson: 'metricsJson',
  baselineJson: 'baselineJson',
  impactJson: 'impactJson',
  tagsJson: 'tagsJson',
  entitiesJson: 'entitiesJson',
  privacyLevel: 'privacyLevel',
  dedupeKey: 'dedupeKey',
  embedding: 'embedding',
  aiProcessed: 'aiProcessed',
  aiTagsJson: 'aiTagsJson',
  lineageJson: 'lineageJson',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.HotspotScalarFieldEnum = {
  id: 'id',
  title: 'title',
  summary: 'summary',
  status: 'status',
  rankScore: 'rankScore',
  confidence: 'confidence',
  primaryCategoryId: 'primaryCategoryId',
  linkedEntitiesJson: 'linkedEntitiesJson',
  clusteringMethod: 'clusteringMethod',
  similarityThreshold: 'similarityThreshold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.HotspotSignalScalarFieldEnum = {
  hotspotId: 'hotspotId',
  signalId: 'signalId',
  membershipStrength: 'membershipStrength',
  isOutlier: 'isOutlier',
  addedAt: 'addedAt',
};

exports.Prisma.IdeaScalarFieldEnum = {
  id: 'id',
  hotspotId: 'hotspotId',
  title: 'title',
  description: 'description',
  origin: 'origin',
  votes: 'votes',
  status: 'status',
  evidenceJson: 'evidenceJson',
  tagsJson: 'tagsJson',
  confidence: 'confidence',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.InputScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  department: 'department',
  issueType: 'issueType',
  rootCause: 'rootCause',
  priority: 'priority',
  aiTags: 'aiTags',
  aiConfidence: 'aiConfidence',
  aiSuggestions: 'aiSuggestions',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.SolutionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  hotspotId: 'hotspotId',
  initiativeId: 'initiativeId',
  ideaId: 'ideaId',
  tasks: 'tasks',
  progress: 'progress',
  targetDate: 'targetDate',
  actualCompletionDate: 'actualCompletionDate',
  estimatedEffort: 'estimatedEffort',
  businessValue: 'businessValue',
  successMetrics: 'successMetrics',
  expectedImpactJson: 'expectedImpactJson',
  actualImpactJson: 'actualImpactJson',
  inputId: 'inputId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.RequirementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  acceptanceCriteria: 'acceptanceCriteria',
  priority: 'priority',
  status: 'status',
  estimatedEffort: 'estimatedEffort',
  dependencies: 'dependencies',
  businessValue: 'businessValue',
  riskAssessment: 'riskAssessment',
  stakeholders: 'stakeholders',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectionReason: 'rejectionReason',
  solutionId: 'solutionId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.FRDDocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  aiGenerated: 'aiGenerated',
  aiConfidence: 'aiConfidence',
  aiPromptUsed: 'aiPromptUsed',
  version: 'version',
  status: 'status',
  executiveApproved: 'executiveApproved',
  exportFormats: 'exportFormats',
  templateUsed: 'templateUsed',
  generationTime: 'generationTime',
  wordCount: 'wordCount',
  lastExportedAt: 'lastExportedAt',
  solutionId: 'solutionId',
  createdBy: 'createdBy',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  entityType: 'entityType',
  entityId: 'entityId',
  parentId: 'parentId',
  mentions: 'mentions',
  edited: 'edited',
  editedAt: 'editedAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.VoteScalarFieldEnum = {
  id: 'id',
  value: 'value',
  entityType: 'entityType',
  entityId: 'entityId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
};

exports.Prisma.InputGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  aiSuggested: 'aiSuggested',
  aiConfidence: 'aiConfidence',
  aiReasoning: 'aiReasoning',
  inputCount: 'inputCount',
  avgPriority: 'avgPriority',
  lastActivity: 'lastActivity',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  changes: 'changes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  userId: 'userId',
  createdAt: 'createdAt',
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  entityType: 'entityType',
  entityId: 'entityId',
  read: 'read',
  readAt: 'readAt',
  delivered: 'delivered',
  userId: 'userId',
  createdAt: 'createdAt',
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc',
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last',
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  EXECUTIVE: 'EXECUTIVE',
  CONTRIBUTOR: 'CONTRIBUTOR',
};

exports.Severity = exports.$Enums.Severity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
};

exports.HotspotStatus = exports.$Enums.HotspotStatus = {
  OPEN: 'OPEN',
  APPROVED: 'APPROVED',
  HANDED_OFF: 'HANDED_OFF',
  MONITORING: 'MONITORING',
  RESOLVED: 'RESOLVED',
  CLOSED_NO_ACTION: 'CLOSED_NO_ACTION',
};

exports.InputType = exports.$Enums.InputType = {
  PROBLEM: 'PROBLEM',
  OPPORTUNITY: 'OPPORTUNITY',
  GENERAL: 'GENERAL',
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL',
};

exports.InputStatus = exports.$Enums.InputStatus = {
  ACTIVE: 'ACTIVE',
  RESOLVED: 'RESOLVED',
  ARCHIVED: 'ARCHIVED',
  DUPLICATE: 'DUPLICATE',
};

exports.SolutionStatus = exports.$Enums.SolutionStatus = {
  DRAFT: 'DRAFT',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  IMPLEMENTED: 'IMPLEMENTED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD',
};

exports.RequirementStatus = exports.$Enums.RequirementStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  IMPLEMENTED: 'IMPLEMENTED',
  OBSOLETE: 'OBSOLETE',
};

exports.FRDStatus = exports.$Enums.FRDStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  DELIVERED: 'DELIVERED',
  ARCHIVED: 'ARCHIVED',
};

exports.EntityType = exports.$Enums.EntityType = {
  INPUT: 'INPUT',
  SIGNAL: 'SIGNAL',
  HOTSPOT: 'HOTSPOT',
  IDEA: 'IDEA',
  SOLUTION: 'SOLUTION',
  REQUIREMENT: 'REQUIREMENT',
  FRD_DOCUMENT: 'FRD_DOCUMENT',
};

exports.VoteValue = exports.$Enums.VoteValue = {
  UP: 'UP',
  DOWN: 'DOWN',
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MENTION: 'MENTION',
  VOTE: 'VOTE',
  COMMENT: 'COMMENT',
  STATUS_CHANGE: 'STATUS_CHANGE',
  APPROVAL_REQUEST: 'APPROVAL_REQUEST',
  ASSIGNMENT: 'ASSIGNMENT',
  DEADLINE_REMINDER: 'DEADLINE_REMINDER',
};

exports.Prisma.ModelName = {
  User: 'User',
  Department: 'Department',
  Team: 'Team',
  Initiative: 'Initiative',
  Category: 'Category',
  Signal: 'Signal',
  Hotspot: 'Hotspot',
  HotspotSignal: 'HotspotSignal',
  Idea: 'Idea',
  Input: 'Input',
  Solution: 'Solution',
  Requirement: 'Requirement',
  FRDDocument: 'FRDDocument',
  Comment: 'Comment',
  Vote: 'Vote',
  InputGroup: 'InputGroup',
  AuditLog: 'AuditLog',
  Notification: 'Notification',
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' +
            runtime.prettyName +
            '`).';
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
