#!/usr/bin/env node

/**
 * FAEVision Multi-Environment Database Setup
 * Creates and configures databases for Production, Preview, and Development
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üöÄ FAEVision Multi-Environment Database Setup');
console.log('================================================');

// Environment configuration based on FAEVision memory
const environments = {
  production: {
    prefix: 'faevision_preview_', // Note: Using preview prefix for production as per memory
    name: 'Production',
    branch: 'main',
    url_suffix: '',
  },
  preview: {
    prefix: 'faevision_preview_',
    name: 'Preview',
    branch: 'preview',
    url_suffix: '-git-preview',
  },
  development: {
    prefix: 'faevision_dev_',
    name: 'Development',
    branch: 'develop',
    url_suffix: '-git-develop',
  },
};

async function setupEnvironmentDatabases() {
  console.log('\nüìä Current Database Status:');
  console.log('‚úÖ Production: Neon database (working)');
  console.log('‚ùå Preview: Not configured');
  console.log('‚ùå Development: Not configured');

  console.log('\nüéØ Multi-Environment Strategy:');
  console.log('1. Keep existing Neon database for Production');
  console.log('2. Create Vercel Postgres for Preview environment');
  console.log('3. Create Vercel Postgres for Development environment');
  console.log('4. Configure environment-specific variables');

  console.log('\n‚ö†Ô∏è  MANUAL STEPS REQUIRED:');
  console.log('This script provides the configuration strategy.');
  console.log('Database creation must be done via Vercel Dashboard:');
  console.log('');
  console.log('1. Go to Vercel Dashboard > Storage > Create Database');
  console.log('2. Create: faevision-preview (Postgres)');
  console.log('3. Create: faevision-development (Postgres)');
  console.log('4. Configure environment variables in Vercel project settings');
  console.log('');
  console.log('Environment Variable Mapping:');

  Object.entries(environments).forEach(([env, config]) => {
    console.log(`\n${config.name.toUpperCase()} (${config.branch} branch):`);
    console.log(`  DATABASE_URL: ${config.prefix}DATABASE_URL`);
    console.log(`  DIRECT_URL: ${config.prefix}DIRECT_URL`);
    console.log(
      `  Deployment URL: faevision-simplified${config.url_suffix}.vercel.app`
    );
  });

  console.log('\nüìù Next Steps:');
  console.log('1. Create databases in Vercel Dashboard');
  console.log('2. Configure Vercel environment variables');
  console.log('3. Update Prisma schema for DIRECT_URL');
  console.log('4. Run database migrations for each environment');
  console.log('5. Seed databases with appropriate data');
}

function createEnvironmentFiles() {
  console.log('\nüìÅ Creating environment configuration files...');

  // Create .env.preview
  const previewEnv = `# FAEVision Preview Environment
# Generated by setup-multi-environment-databases.js

# Database (Vercel Postgres - Preview)
DATABASE_URL="postgres://username:password@host:port/faevision_preview?sslmode=require"
DIRECT_URL="postgres://username:password@host:port/faevision_preview?sslmode=require"

# NextAuth Configuration
NEXTAUTH_SECRET="your-preview-secret-here"
NEXTAUTH_URL="https://faevision-simplified-git-preview.vercel.app"

# Environment
NODE_ENV="preview"

# AI Integration (same as production)
OPENAI_API_KEY="your-openai-api-key-here"

# Email Service (same as production)
RESEND_API_KEY="your-resend-api-key-here"
`;

  // Create .env.development
  const developmentEnv = `# FAEVision Development Environment
# Generated by setup-multi-environment-databases.js

# Database (Vercel Postgres - Development)
DATABASE_URL="postgres://username:password@host:port/faevision_development?sslmode=require"
DIRECT_URL="postgres://username:password@host:port/faevision_development?sslmode=require"

# NextAuth Configuration
NEXTAUTH_SECRET="your-development-secret-here"
NEXTAUTH_URL="https://faevision-simplified-git-develop.vercel.app"

# Environment
NODE_ENV="development"

# AI Integration (same as production)
OPENAI_API_KEY="your-openai-api-key-here"

# Email Service (same as production)  
RESEND_API_KEY="your-resend-api-key-here"
`;

  fs.writeFileSync('.env.preview.example', previewEnv);
  fs.writeFileSync('.env.development.example', developmentEnv);

  console.log('‚úÖ Created .env.preview.example');
  console.log('‚úÖ Created .env.development.example');
}

async function main() {
  try {
    await setupEnvironmentDatabases();
    createEnvironmentFiles();

    console.log('\nüéâ Multi-Environment Setup Guide Created!');
    console.log('\nüìã Implementation Checklist:');
    console.log('‚ñ° Create Vercel Postgres databases (Preview & Development)');
    console.log('‚ñ° Configure Vercel environment variables');
    console.log('‚ñ° Update Prisma schema with DIRECT_URL');
    console.log('‚ñ° Run migrations on all environments');
    console.log('‚ñ° Create environment-specific seed scripts');
    console.log('‚ñ° Test deployments on all branches');
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  }
}

main();
