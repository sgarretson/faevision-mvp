#!/usr/bin/env tsx
/**
 * Test Dashboard Metrics with Current Seed Data
 *
 * Verifies Dashboard API fix shows real data instead of 0s
 * Tests with existing minimal seed data (3 signals, 3 hotspots, etc.)
 */

import { prisma } from '../src/lib/prisma';

async function testDashboardMetrics() {
  console.log('üìä TESTING DASHBOARD METRICS WITH EXISTING SEED DATA\n');

  try {
    // Simulate Dashboard API queries (now with correct table names)
    console.log('üîç Testing Dashboard API queries...\n');

    const [
      totalSignals,
      totalHotspots,
      totalIdeas,
      totalSolutions,
      totalVotes,
      totalComments,
      totalUsers,
    ] = await Promise.all([
      (prisma as any).signals?.count() || 0,
      (prisma as any).hotspots?.count() || 0,
      (prisma as any).ideas?.count() || 0,
      (prisma as any).solutions?.count() || 0,
      (prisma as any).votes?.count() || 0,
      (prisma as any).comments?.count() || 0,
      (prisma as any).users?.count() || 0,
    ]);

    console.log('üìà DASHBOARD METRICS RESULTS:');
    console.log(`   üìä Total Inputs (Signals): ${totalSignals}`);
    console.log(`   üî• Total Hotspots: ${totalHotspots}`);
    console.log(`   üí° Total Ideas: ${totalIdeas}`);
    console.log(`   üõ†Ô∏è Total Solutions: ${totalSolutions}`);
    console.log(`   üëç Total Votes: ${totalVotes}`);
    console.log(`   üí¨ Total Comments: ${totalComments}`);
    console.log(`   üë• Total Users: ${totalUsers}\n`);

    // Test engagement calculation
    const totalEngagement = totalVotes + totalComments;
    console.log(
      `üéØ CALCULATED ENGAGEMENT: ${totalEngagement} (votes + comments)\n`
    );

    // Test recent signals query
    console.log('üïí Testing Recent Signals Query...');
    const recentSignals =
      (await (prisma as any).signals?.findMany({
        take: 5,
        orderBy: { createdAt: 'desc' },
        select: {
          id: true,
          title: true,
          createdAt: true,
          createdBy: {
            select: { name: true, email: true },
          },
        },
      })) || [];

    console.log(`   üìã Recent Signals Found: ${recentSignals.length}`);
    recentSignals.forEach((signal: any, index: number) => {
      console.log(
        `   ${index + 1}. ${signal.title || 'Untitled'} - ${signal.createdBy?.name || 'Unknown'}`
      );
    });

    console.log('\n‚úÖ DASHBOARD METRICS TEST COMPLETE!');

    if (totalSignals > 0) {
      console.log('üöÄ Dashboard should now show REAL DATA instead of 0s');
    } else {
      console.log('‚ö†Ô∏è No signals found - Dashboard will still show 0s');
    }
  } catch (error) {
    console.error('‚ùå Dashboard metrics test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  testDashboardMetrics().catch(console.error);
}

export default testDashboardMetrics;
