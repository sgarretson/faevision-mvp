generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  role          UserRole       @default(CONTRIBUTOR)
  department    String?
  avatar        String?
  passwordHash  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  comments      Comment[]
  approvedFRDs  FRDDocument[]  @relation("FRDApprover")
  frdDocuments  FRDDocument[]  @relation("FRDCreator")
  input_groups  InputGroup[]
  inputs        Input[]
  notifications Notification[]
  requirements  Requirement[]
  solutions     Solution[]
  tasks         tasks[]
  votes         Vote[]

  @@map("users")
}

model Input {
  id                String              @id @default(cuid())
  title             String
  description       String
  type              InputType
  status            InputStatus         @default(NEW)
  createdBy         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  department        String?
  issueType         IssueType?
  rootCause         String?
  priority          Priority            @default(MEDIUM)
  aiProcessed       Boolean             @default(false)
  aiTags            Json?
  aiSuggestions     Json?
  InputToInputGroup InputToInputGroup[]
  comments          Comment[]
  creator           User                @relation(fields: [createdBy], references: [id])
  votes             Vote[]
  solutions         Solution[]          @relation("InputToSolution")

  @@index([createdBy])
  @@index([department])
  @@index([priority])
  @@index([status])
  @@index([aiProcessed])
  @@index([issueType])
  @@index([type])
  @@map("inputs")
}

model Solution {
  id               String         @id @default(cuid())
  title            String
  description      String
  ownerId          String
  status           SolutionStatus @default(PLANNING)
  priority         Priority       @default(MEDIUM)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  estimatedEffort  String?
  targetCompletion DateTime?
  actualCompletion DateTime?
  successCriteria  Json?
  comments         Comment[]
  frdDocuments     FRDDocument[]
  requirements     Requirement[]
  users            User           @relation(fields: [ownerId], references: [id])
  tasks            tasks[]
  votes            Vote[]
  inputs           Input[]        @relation("InputToSolution")

  @@index([status])
  @@index([ownerId])
  @@index([priority])
  @@map("solutions")
}

model Requirement {
  id                 String            @id @default(cuid())
  title              String
  description        String
  acceptanceCriteria Json
  priority           Priority          @default(MEDIUM)
  status             RequirementStatus @default(DRAFT)
  estimatedEffort    String?
  dependencies       Json?
  businessValue      String?
  riskAssessment     String?
  stakeholders       Json?
  approvedBy         String?
  approvedAt         DateTime?
  rejectionReason    String?
  solutionId         String
  createdBy          String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  comments           Comment[]
  creator            User              @relation(fields: [createdBy], references: [id])
  solution           Solution          @relation(fields: [solutionId], references: [id])

  @@index([solutionId])
  @@index([createdBy])
  @@index([status])
  @@index([priority])
  @@map("requirements")
}

model FRDDocument {
  id                String    @id @default(cuid())
  title             String
  content           Json
  aiGenerated       Boolean   @default(false)
  aiConfidence      Float?
  aiPromptUsed      String?
  version           String    @default("1.0")
  status            FRDStatus @default(DRAFT)
  executiveApproved Boolean   @default(false)
  exportFormats     Json?
  templateUsed      String?
  generationTime    Float?
  wordCount         Int?
  lastExportedAt    DateTime?
  solutionId        String
  createdBy         String
  approvedBy        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  approver          User?     @relation("FRDApprover", fields: [approvedBy], references: [id])
  creator           User      @relation("FRDCreator", fields: [createdBy], references: [id])
  solution          Solution  @relation(fields: [solutionId], references: [id])

  @@index([solutionId])
  @@index([createdBy])
  @@index([status])
  @@index([aiGenerated])
  @@map("frd_documents")
}

model Comment {
  id            String       @id @default(cuid())
  content       String
  authorId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  inputId       String?
  solutionId    String?
  requirementId String?
  parentId      String?
  users         User         @relation(fields: [authorId], references: [id])
  inputs        Input?       @relation(fields: [inputId], references: [id])
  thread        Comment?     @relation("CommentThread", fields: [parentId], references: [id])
  replies       Comment[]    @relation("CommentThread")
  requirements  Requirement? @relation(fields: [requirementId], references: [id])
  solutions     Solution?    @relation(fields: [solutionId], references: [id])

  @@index([parentId])
  @@index([authorId])
  @@index([inputId])
  @@index([requirementId])
  @@index([solutionId])
  @@map("comments")
}

model Vote {
  id         String    @id @default(cuid())
  userId     String
  value      Int
  createdAt  DateTime  @default(now())
  inputId    String?
  solutionId String?
  inputs     Input?    @relation(fields: [inputId], references: [id])
  solutions  Solution? @relation(fields: [solutionId], references: [id])
  users      User      @relation(fields: [userId], references: [id])

  @@unique([userId, inputId])
  @@unique([userId, solutionId])
  @@index([inputId])
  @@index([solutionId])
  @@index([userId])
  @@map("votes")
}

model InputGroup {
  id                String              @id @default(cuid())
  name              String
  description       String?
  ownerId           String
  status            GroupStatus         @default(ACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  aiSuggested       Boolean             @default(false)
  aiSimilarity      Float?
  aiTheme           String?
  InputToInputGroup InputToInputGroup[]
  users             User                @relation(fields: [ownerId], references: [id])

  @@index([aiSuggested])
  @@index([ownerId])
  @@index([status])
  @@map("input_groups")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([entityId])
  @@index([entityType])
  @@map("audit_logs")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  readAt    DateTime?
  data      Json?
  createdAt DateTime         @default(now())
  users     User             @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([readAt])
  @@index([userId])
  @@map("notifications")
}

model InputToInputGroup {
  A            String
  B            String
  inputs       Input      @relation(fields: [A], references: [id], onDelete: Cascade)
  input_groups InputGroup @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_InputToInputGroup_AB_pkey")
  @@index([B], map: "_InputToInputGroup_B_index")
  @@map("_InputToInputGroup")
}

model tasks {
  id             String     @id
  title          String
  description    String?
  solutionId     String
  assigneeId     String?
  status         TaskStatus @default(NOT_STARTED)
  priority       Priority   @default(MEDIUM)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  estimatedHours Float?
  actualHours    Float?
  dueDate        DateTime?
  dependencies   Json?
  users          User?      @relation(fields: [assigneeId], references: [id])
  solutions      Solution   @relation(fields: [solutionId], references: [id])

  @@index([assigneeId])
  @@index([dueDate])
  @@index([priority])
  @@index([solutionId])
  @@index([status])
}

enum UserRole {
  ADMIN
  EXECUTIVE
  CONTRIBUTOR
}

enum InputType {
  PROBLEM
  OPPORTUNITY
  GENERAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum InputStatus {
  NEW
  DISCUSSING
  ORGANIZED
  IN_SOLUTION
  ARCHIVED
}

enum SolutionStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum RequirementStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
  REVISED
}

enum FRDStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
}

enum NotificationType {
  COMMENT
  VOTE
  STATUS_CHANGE
  ASSIGNMENT
  DEADLINE
  SYSTEM
}

enum GroupStatus {
  ACTIVE
  ARCHIVED
  CONVERTED_TO_SOLUTION
}

enum IssueType {
  PROCESS
  TECHNOLOGY
  COMMUNICATION
  RESOURCE
  OTHER
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
