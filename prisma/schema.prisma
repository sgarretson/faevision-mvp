generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model InputToInputGroup {
  A            String
  B            String
  inputs       inputs       @relation(fields: [A], references: [id], onDelete: Cascade)
  input_groups input_groups @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_InputToInputGroup_AB_pkey")
  @@index([B], map: "_InputToInputGroup_B_index")
  @@map("_InputToInputGroup")
}

model ai_analysis_audit {
  id             String   @id
  hotspotId      String
  analysisType   String
  userId         String
  requestData    Json?
  responseData   Json?
  processingTime Int?
  confidence     Float?
  status         String
  errorMessage   String?
  createdAt      DateTime @default(now())
  users          users    @relation(fields: [userId], references: [id])

  @@index([analysisType])
  @@index([createdAt])
  @@index([hotspotId])
  @@index([status])
  @@index([userId])
}

model ai_insight_overrides {
  id                     String   @id
  signalId               String
  insightId              String
  insightType            String
  originalRecommendation Json?
  overrideReason         String
  executiveJustification String?
  newValue               Json?
  executiveId            String
  executiveName          String
  executiveEmail         String
  overriddenAt           DateTime @default(now())
  createdAt              DateTime @default(now())
  users                  users    @relation(fields: [executiveId], references: [id])
  signals                signals  @relation(fields: [signalId], references: [id], onDelete: Cascade)

  @@index([executiveId])
  @@index([insightId])
  @@index([signalId])
}

model audit_logs {
  id         String   @id
  userId     String
  action     String
  entityType String
  entityId   String
  changes    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  sessionId  String?
  users      users    @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([entityType, entityId])
  @@index([userId])
}

model categories {
  id               String       @id
  name             String       @unique
  description      String?
  color            String?
  icon             String?
  parentId         String?
  isActive         Boolean      @default(true)
  sortOrder        Int          @default(0)
  usageCount       Int          @default(0)
  isSystem         Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  categories       categories?  @relation("categoriesTocategories", fields: [parentId], references: [id])
  other_categories categories[] @relation("categoriesTocategories")
  signals          signals[]
}

model comments {
  id             String     @id
  content        String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  parentId       String?
  createdBy      String
  edited         Boolean    @default(false)
  editedAt       DateTime?
  entityId       String
  entityType     EntityType
  mentions       Json?
  users          users      @relation(fields: [createdBy], references: [id])
  comments       comments?  @relation("commentsTocomments", fields: [parentId], references: [id])
  other_comments comments[] @relation("commentsTocomments")

  @@index([createdAt])
  @@index([createdBy])
  @@index([entityType, entityId])
  @@index([parentId])
}

model departments {
  id                                       String    @id
  name                                     String    @unique
  description                              String?
  headCount                                Int       @default(0)
  budgetAllocation                         Float     @default(0)
  managerId                                String?
  costCenter                               String?
  location                                 String?
  isActive                                 Boolean   @default(true)
  utilizationTarget                        Float?
  actualUtilization                        Float?
  createdAt                                DateTime  @default(now())
  updatedAt                                DateTime
  users_departments_managerIdTousers       users?    @relation("departments_managerIdTousers", fields: [managerId], references: [id])
  signals                                  signals[]
  teams                                    teams[]
  users_users_departmentObjIdTodepartments users[]   @relation("users_departmentObjIdTodepartments")
}

model frd_documents {
  id                                    String    @id
  title                                 String
  content                               Json
  aiGenerated                           Boolean   @default(false)
  aiConfidence                          Float?
  aiPromptUsed                          String?
  version                               String    @default("1.0")
  status                                FRDStatus @default(DRAFT)
  executiveApproved                     Boolean   @default(false)
  exportFormats                         Json?
  templateUsed                          String?
  generationTime                        Float?
  wordCount                             Int?
  lastExportedAt                        DateTime?
  solutionId                            String
  createdBy                             String
  approvedBy                            String?
  createdAt                             DateTime  @default(now())
  updatedAt                             DateTime
  users_frd_documents_approvedByTousers users?    @relation("frd_documents_approvedByTousers", fields: [approvedBy], references: [id])
  users_frd_documents_createdByTousers  users     @relation("frd_documents_createdByTousers", fields: [createdBy], references: [id])
  solutions                             solutions @relation(fields: [solutionId], references: [id])

  @@index([aiGenerated])
  @@index([createdBy])
  @@index([solutionId])
  @@index([status])
}

model hotspot_signals {
  hotspotId          String
  signalId           String
  membershipStrength Float    @default(1.0)
  isOutlier          Boolean  @default(false)
  addedAt            DateTime @default(now())
  hotspots           hotspots @relation(fields: [hotspotId], references: [id], onDelete: Cascade)
  signals            signals  @relation(fields: [signalId], references: [id], onDelete: Cascade)

  @@id([hotspotId, signalId])
}

model hotspots {
  id                        String            @id
  title                     String
  summary                   String
  status                    HotspotStatus     @default(OPEN)
  rankScore                 Float             @default(0)
  confidence                Float             @default(0)
  primaryCategoryId         String?
  linkedEntitiesJson        Json?
  clusteringMethod          String?
  similarityThreshold       Float?
  rcaBreakdownJson          Json?
  solutionSuggestionsJson   Json?
  decisionMatrixJson        Json?
  crossFunctionalImpactJson Json?
  lastAnalysisAt            DateTime?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime
  clusteringQualityScore    Float?
  clusteringResults         Json?
  clusteringVersion         String?
  lastClusteredAt           DateTime?
  hotspot_signals           hotspot_signals[]
  ideas                     ideas[]
  solutions                 solutions[]

  @@index([confidence])
  @@index([lastAnalysisAt])
  @@index([primaryCategoryId])
  @@index([rankScore])
  @@index([status])
}

model ideas {
  id           String       @id
  hotspotId    String
  title        String?
  description  String
  origin       String
  votes        Int          @default(0)
  status       String       @default("draft")
  evidenceJson Json?
  tagsJson     Json?
  confidence   Float?
  createdById  String?
  initiativeId String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  users        users?       @relation(fields: [createdById], references: [id])
  hotspots     hotspots     @relation(fields: [hotspotId], references: [id])
  initiatives  initiatives? @relation(fields: [initiativeId], references: [id])
  solutions    solutions?

  @@index([createdById])
  @@index([hotspotId])
  @@index([origin])
  @@index([status])
}

model initiatives {
  id             String            @id
  name           String            @unique
  description    String?
  status         initiative_status @default(PLANNING)
  priority       priority          @default(MEDIUM)
  ownerId        String?
  budget         Float             @default(0)
  actualSpend    Float             @default(0)
  startDate      DateTime?
  targetDate     DateTime?
  completionDate DateTime?
  expectedROI    Float?
  actualROI      Float?
  riskLevel      risk_level        @default(MEDIUM)
  goalJson       Json?
  roiJson        Json?
  milestonesJson Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime
  ideas          ideas[]
  users          users?            @relation(fields: [ownerId], references: [id])
  solutions      solutions[]
}

model input_groups {
  id                String              @id
  name              String
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  aiSuggested       Boolean             @default(false)
  aiConfidence      Float?
  aiReasoning       String?
  avgPriority       Float?
  color             String?
  createdBy         String
  inputCount        Int                 @default(0)
  lastActivity      DateTime?
  InputToInputGroup InputToInputGroup[]
  users             users               @relation(fields: [createdBy], references: [id])

  @@index([aiSuggested])
  @@index([createdBy])
  @@index([lastActivity])
}

model inputs {
  id                String              @id
  title             String
  description       String
  type              InputType           @default(GENERAL)
  status            InputStatus         @default(ACTIVE)
  createdBy         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  department        String?
  rootCause         String?
  aiTags            Json?
  aiSuggestions     Json?
  aiConfidence      Float?
  issueType         String?
  priority          priority            @default(MEDIUM)
  InputToInputGroup InputToInputGroup[]
  users             users               @relation(fields: [createdBy], references: [id])
  solutions         solutions[]

  @@index([createdAt])
  @@index([createdBy])
  @@index([department])
  @@index([priority])
  @@index([status])
}

model notifications {
  id         String           @id
  userId     String
  type       NotificationType
  title      String
  message    String
  readAt     DateTime?
  createdAt  DateTime         @default(now())
  delivered  Boolean          @default(false)
  entityId   String?
  entityType EntityType?
  read       Boolean          @default(false)

  @@index([createdAt])
  @@index([type])
  @@index([userId, read])
}

model requirements {
  id                 String            @id
  title              String
  description        String
  acceptanceCriteria Json
  status             RequirementStatus @default(DRAFT)
  estimatedEffort    String?
  dependencies       Json?
  businessValue      String?
  riskAssessment     String?
  stakeholders       Json?
  approvedBy         String?
  approvedAt         DateTime?
  rejectionReason    String?
  solutionId         String
  createdBy          String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  priority           priority          @default(MEDIUM)
  users              users             @relation(fields: [createdBy], references: [id])
  solutions          solutions         @relation(fields: [solutionId], references: [id])

  @@index([createdBy])
  @@index([priority])
  @@index([solutionId])
  @@index([status])
}

model signals {
  id                      String                 @id
  inputId                 String                 @unique
  timestamp               DateTime
  receivedAt              DateTime               @default(now())
  schemaVersion           String                 @default("1.0")
  sourceJson              Json?
  confidence              Float?
  attachmentsJson         Json?
  sourceType              String
  sourceId                String?
  systemName              String?
  title                   String?
  description             String
  severity                Severity
  severityScore           Int                    @default(0)
  departmentId            String?
  teamId                  String?
  categoryId              String?
  metricsJson             Json?
  baselineJson            Json?
  impactJson              Json?
  tagsJson                Json?
  entitiesJson            Json?
  privacyLevel            String?
  dedupeKey               String?                @unique
  embedding               Bytes?
  aiProcessed             Boolean                @default(false)
  aiTagsJson              Json?
  lineageJson             Json?
  createdById             String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime
  domainClassification    Json?
  enhancedTagsJson        Json?
  lastTaggedAt            DateTime?
  tagGenerationMeta       Json?
  tagModelVersion         String?
  clusteringFeaturesJson  Json?
  featuresQualityScore    Float?
  featuresVersion         String?
  lastFeaturesGeneratedAt DateTime?
  ai_insight_overrides    ai_insight_overrides[]
  hotspot_signals         hotspot_signals[]
  categories              categories?            @relation(fields: [categoryId], references: [id])
  users                   users?                 @relation(fields: [createdById], references: [id])
  departments             departments?           @relation(fields: [departmentId], references: [id])
  teams                   teams?                 @relation(fields: [teamId], references: [id])

  @@index([aiProcessed])
  @@index([createdById])
  @@index([departmentId])
  @@index([receivedAt])
  @@index([severity])
  @@index([sourceType])
  @@index([teamId])
  @@index([timestamp])
}

model solutions {
  id                   String          @id
  title                String
  description          String
  status               SolutionStatus  @default(DRAFT)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime
  estimatedEffort      String?
  actualCompletionDate DateTime?
  actualImpactJson     Json?
  businessValue        String?
  createdBy            String
  expectedImpactJson   Json?
  hotspotId            String?
  ideaId               String?         @unique
  initiativeId         String?
  inputId              String?
  progress             Float           @default(0.0)
  successMetrics       Json?
  targetDate           DateTime?
  tasks                Json?
  frd_documents        frd_documents[]
  requirements         requirements[]
  users                users           @relation(fields: [createdBy], references: [id])
  hotspots             hotspots?       @relation(fields: [hotspotId], references: [id])
  ideas                ideas?          @relation(fields: [ideaId], references: [id])
  initiatives          initiatives?    @relation(fields: [initiativeId], references: [id])
  inputs               inputs?         @relation(fields: [inputId], references: [id])

  @@index([createdBy])
  @@index([inputId])
  @@index([status])
  @@index([targetDate])
}

model teams {
  id                          String       @id
  name                        String
  description                 String?
  departmentId                String?
  leaderId                    String?
  memberCount                 Int          @default(0)
  maxCapacity                 Int?
  isActive                    Boolean      @default(true)
  teamType                    String?
  currentProjects             Int          @default(0)
  budgetAllocation            Float        @default(0)
  utilizationRate             Float?
  createdAt                   DateTime     @default(now())
  updatedAt                   DateTime
  signals                     signals[]
  departments                 departments? @relation(fields: [departmentId], references: [id])
  users_teams_leaderIdTousers users?       @relation("teams_leaderIdTousers", fields: [leaderId], references: [id])
  users_TeamMembers           users[]      @relation("TeamMembers")
}

model users {
  id                                             String                 @id
  email                                          String                 @unique
  name                                           String
  role                                           UserRole               @default(CONTRIBUTOR)
  department                                     String?
  avatar                                         String?
  passwordHash                                   String?
  createdAt                                      DateTime               @default(now())
  updatedAt                                      DateTime
  title                                          String?
  managerId                                      String?
  billableRate                                   Float?
  costCenter                                     String?
  location                                       String?
  isActive                                       Boolean                @default(true)
  lastLoginAt                                    DateTime?
  profileJson                                    Json?
  targetUtilization                              Float?
  utilizationRate                                Float?
  departmentObjId                                String?
  ai_analysis_audit                              ai_analysis_audit[]
  ai_insight_overrides                           ai_insight_overrides[]
  audit_logs                                     audit_logs[]
  comments                                       comments[]
  departments_departments_managerIdTousers       departments[]          @relation("departments_managerIdTousers")
  frd_documents_frd_documents_approvedByTousers  frd_documents[]        @relation("frd_documents_approvedByTousers")
  frd_documents_frd_documents_createdByTousers   frd_documents[]        @relation("frd_documents_createdByTousers")
  ideas                                          ideas[]
  initiatives                                    initiatives[]
  input_groups                                   input_groups[]
  inputs                                         inputs[]
  requirements                                   requirements[]
  signals                                        signals[]
  solutions                                      solutions[]
  teams_teams_leaderIdTousers                    teams[]                @relation("teams_leaderIdTousers")
  departments_users_departmentObjIdTodepartments departments?           @relation("users_departmentObjIdTodepartments", fields: [departmentObjId], references: [id])
  users                                          users?                 @relation("usersTousers", fields: [managerId], references: [id])
  other_users                                    users[]                @relation("usersTousers")
  votes                                          votes[]
  teams_TeamMembers                              teams[]                @relation("TeamMembers")
}

model votes {
  id         String     @id
  createdAt  DateTime   @default(now())
  createdBy  String
  entityId   String
  entityType EntityType
  value      VoteValue
  users      users      @relation(fields: [createdBy], references: [id])

  @@unique([entityType, entityId, createdBy])
  @@index([createdBy])
  @@index([entityType, entityId])
}

enum EntityType {
  INPUT
  SIGNAL
  HOTSPOT
  IDEA
  SOLUTION
  REQUIREMENT
  FRD_DOCUMENT
}

enum FRDStatus {
  DRAFT
  REVIEW
  APPROVED
  DELIVERED
  ARCHIVED
}

enum HotspotStatus {
  OPEN
  APPROVED
  HANDED_OFF
  MONITORING
  RESOLVED
  CLOSED_NO_ACTION
}

enum InputStatus {
  ACTIVE
  RESOLVED
  ARCHIVED
  DUPLICATE
}

enum InputType {
  PROBLEM
  OPPORTUNITY
  GENERAL
}

enum NotificationType {
  MENTION
  VOTE
  COMMENT
  STATUS_CHANGE
  APPROVAL_REQUEST
  ASSIGNMENT
  DEADLINE_REMINDER
}

enum RequirementStatus {
  DRAFT
  REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
  OBSOLETE
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SolutionStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  APPROVED
  IMPLEMENTED
  CANCELLED
  ON_HOLD
}

enum UserRole {
  ADMIN
  EXECUTIVE
  CONTRIBUTOR
}

enum VoteValue {
  UP
  DOWN
}

enum initiative_status {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum priority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum risk_level {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
